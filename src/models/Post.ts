/* tslint:disable */
/* eslint-disable */
/**
 * Cuculus API
 * The Cuculus API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 投稿ID
     * @type {string}
     * @memberof Post
     */
    id: string;
    /**
     * リポスト|引用元ID|オリジナルには含まれません。
     * @type {string}
     * @memberof Post
     */
    originalPostId?: string;
    /**
     * リプライ先ID|リプライでない場合は含まれません。
     * @type {string}
     * @memberof Post
     */
    replyToPostId?: string;
    /**
     * 
     * @type {User}
     * @memberof Post
     */
    author: User;
    /**
     * 本文|リポストの場合はUndefinedになります。
     * @type {string}
     * @memberof Post
     */
    text?: string;
    /**
     * 
     * @type {Date}
     * @memberof Post
     */
    postedAt: Date;
    /**
     * リポスト数
     * @type {number}
     * @memberof Post
     */
    repostCount: number;
    /**
     * お気に入り数
     * @type {number}
     * @memberof Post
     */
    favoriteCount: number;
}

/**
 * Check if a given object implements the Post interface.
 */
export function instanceOfPost(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('author' in value)) return false;
    if (!('postedAt' in value)) return false;
    if (!('repostCount' in value)) return false;
    if (!('favoriteCount' in value)) return false;
    return true;
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'originalPostId': json['original_post_id'] == null ? undefined : json['original_post_id'],
        'replyToPostId': json['reply_to_post_id'] == null ? undefined : json['reply_to_post_id'],
        'author': UserFromJSON(json['author']),
        'text': json['text'] == null ? undefined : json['text'],
        'postedAt': (new Date(json['posted_at'])),
        'repostCount': json['repost_count'],
        'favoriteCount': json['favorite_count'],
    };
}

export function PostToJSON(value?: Post | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'original_post_id': value['originalPostId'],
        'reply_to_post_id': value['replyToPostId'],
        'author': UserToJSON(value['author']),
        'text': value['text'],
        'posted_at': ((value['postedAt']).toISOString()),
        'repost_count': value['repostCount'],
        'favorite_count': value['favoriteCount'],
    };
}

