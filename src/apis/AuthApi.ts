/* tslint:disable */
/* eslint-disable */
/**
 * Cuculus API
 * The Cuculus API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessToken,
  AuthToken,
  LoginRequest,
  PreUserRequest,
  UserRequest,
  VerifyCodeRequest,
} from '../models/index';
import {
    AccessTokenFromJSON,
    AccessTokenToJSON,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    PreUserRequestFromJSON,
    PreUserRequestToJSON,
    UserRequestFromJSON,
    UserRequestToJSON,
    VerifyCodeRequestFromJSON,
    VerifyCodeRequestToJSON,
} from '../models/index';

export interface PostPreSignUpRequest {
    preUserRequest: PreUserRequest;
}

export interface PostPreSignUpVerifyCodeRequest {
    verifyCodeRequest: VerifyCodeRequest;
}

export interface PostSignInRequest {
    loginRequest: LoginRequest;
}

export interface PostSignUpRequest {
    userRequest: UserRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * 仮登録API
     */
    async postPreSignUpRaw(requestParameters: PostPreSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['preUserRequest'] == null) {
            throw new runtime.RequiredError(
                'preUserRequest',
                'Required parameter "preUserRequest" was null or undefined when calling postPreSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/auth/pre-sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreUserRequestToJSON(requestParameters['preUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 仮登録API
     */
    async postPreSignUp(requestParameters: PostPreSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPreSignUpRaw(requestParameters, initOverrides);
    }

    /**
     * 認証コードの確認
     */
    async postPreSignUpVerifyCodeRaw(requestParameters: PostPreSignUpVerifyCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyCodeRequest',
                'Required parameter "verifyCodeRequest" was null or undefined when calling postPreSignUpVerifyCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/auth/pre-sign-up/verify-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyCodeRequestToJSON(requestParameters['verifyCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 認証コードの確認
     */
    async postPreSignUpVerifyCode(requestParameters: PostPreSignUpVerifyCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPreSignUpVerifyCodeRaw(requestParameters, initOverrides);
    }

    /**
     * ログインAPI
     */
    async postSignInRaw(requestParameters: PostSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling postSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * ログインAPI
     */
    async postSignIn(requestParameters: PostSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.postSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログアウトAPI
     */
    async postSignOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v0/auth/sign-out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログアウトAPI
     */
    async postSignOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSignOutRaw(initOverrides);
    }

    /**
     * 本登録API
     */
    async postSignUpRaw(requestParameters: PostSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters['userRequest'] == null) {
            throw new runtime.RequiredError(
                'userRequest',
                'Required parameter "userRequest" was null or undefined when calling postSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/auth/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRequestToJSON(requestParameters['userRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * 本登録API
     */
    async postSignUp(requestParameters: PostSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.postSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アクセストークンの再発行(現在はCookieのみ対応)
     */
    async postTokenRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v0/auth/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenFromJSON(jsonValue));
    }

    /**
     * アクセストークンの再発行(現在はCookieのみ対応)
     */
    async postTokenRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessToken> {
        const response = await this.postTokenRefreshRaw(initOverrides);
        return await response.value();
    }

}
