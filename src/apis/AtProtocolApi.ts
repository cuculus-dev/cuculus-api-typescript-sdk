/* tslint:disable */
/* eslint-disable */
/**
 * Cuculus API
 * The Cuculus API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectAtProtocol,
} from '../models/index';
import {
    ConnectAtProtocolFromJSON,
    ConnectAtProtocolToJSON,
} from '../models/index';

export interface ConnectAtProtocolRequest {
    connectAtProtocol: ConnectAtProtocol;
}

export interface SyncAtProtocolActorRequest {
    handle: string;
}

/**
 * 
 */
export class AtProtocolApi extends runtime.BaseAPI {

    /**
     * 
     */
    async connectAtProtocolRaw(requestParameters: ConnectAtProtocolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.connectAtProtocol === null || requestParameters.connectAtProtocol === undefined) {
            throw new runtime.RequiredError('connectAtProtocol','Required parameter requestParameters.connectAtProtocol was null or undefined when calling connectAtProtocol.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v0/at-protocol/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectAtProtocolToJSON(requestParameters.connectAtProtocol),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async connectAtProtocol(requestParameters: ConnectAtProtocolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectAtProtocolRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async syncAtProtocolActorRaw(requestParameters: SyncAtProtocolActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.handle === null || requestParameters.handle === undefined) {
            throw new runtime.RequiredError('handle','Required parameter requestParameters.handle was null or undefined when calling syncAtProtocolActor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v0/at-protocol/actor/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters.handle))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async syncAtProtocolActor(requestParameters: SyncAtProtocolActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncAtProtocolActorRaw(requestParameters, initOverrides);
    }

}
