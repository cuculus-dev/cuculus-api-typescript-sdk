/* tslint:disable */
/* eslint-disable */
/**
 * Cuculus API
 * The Cuculus API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UpdateProfile,
  UserWithFollows,
} from '../models/index';
import {
    UpdateProfileFromJSON,
    UpdateProfileToJSON,
    UserWithFollowsFromJSON,
    UserWithFollowsToJSON,
} from '../models/index';

export interface UpdateProfileRequest {
    updateProfile: UpdateProfile;
}

export interface UpdateProfileBackgroundImageRequest {
    file?: Blob;
}

export interface UpdateProfileImageRequest {
    file?: Blob;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * プロフィール更新
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithFollows>> {
        if (requestParameters.updateProfile === null || requestParameters.updateProfile === undefined) {
            throw new runtime.RequiredError('updateProfile','Required parameter requestParameters.updateProfile was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v0/accounts/update-profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileToJSON(requestParameters.updateProfile),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithFollowsFromJSON(jsonValue));
    }

    /**
     * プロフィール更新
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithFollows> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ヘッダー画像更新
     */
    async updateProfileBackgroundImageRaw(requestParameters: UpdateProfileBackgroundImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v0/accounts/update-profile-background-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ヘッダー画像更新
     */
    async updateProfileBackgroundImage(requestParameters: UpdateProfileBackgroundImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProfileBackgroundImageRaw(requestParameters, initOverrides);
    }

    /**
     * プロフィール画像変更
     */
    async updateProfileImageRaw(requestParameters: UpdateProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithFollows>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v0/accounts/update-profile-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithFollowsFromJSON(jsonValue));
    }

    /**
     * プロフィール画像変更
     */
    async updateProfileImage(requestParameters: UpdateProfileImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithFollows> {
        const response = await this.updateProfileImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
