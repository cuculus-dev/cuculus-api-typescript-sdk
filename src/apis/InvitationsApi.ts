/* tslint:disable */
/* eslint-disable */
/**
 * Cuculus API
 * The Cuculus API description
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Invitation,
  InvitationCodeRequest,
  UserInvitations,
} from '../models/index';
import {
    InvitationFromJSON,
    InvitationToJSON,
    InvitationCodeRequestFromJSON,
    InvitationCodeRequestToJSON,
    UserInvitationsFromJSON,
    UserInvitationsToJSON,
} from '../models/index';

export interface PostInvitationVerifyCodeRequest {
    invitationCodeRequest: InvitationCodeRequest;
}

/**
 * 
 */
export class InvitationsApi extends runtime.BaseAPI {

    /**
     * 自分が発行した招待コード一覧
     */
    async getInvitationsMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInvitations>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v0/invitations/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInvitationsFromJSON(jsonValue));
    }

    /**
     * 自分が発行した招待コード一覧
     */
    async getInvitationsMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInvitations> {
        const response = await this.getInvitationsMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * 招待コードの確認
     */
    async postInvitationVerifyCodeRaw(requestParameters: PostInvitationVerifyCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['invitationCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'invitationCodeRequest',
                'Required parameter "invitationCodeRequest" was null or undefined when calling postInvitationVerifyCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/invitations/verify-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationCodeRequestToJSON(requestParameters['invitationCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 招待コードの確認
     */
    async postInvitationVerifyCode(requestParameters: PostInvitationVerifyCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postInvitationVerifyCodeRaw(requestParameters, initOverrides);
    }

    /**
     * 招待コードの発行
     */
    async postInvitationsCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v0/invitations/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * 招待コードの発行
     */
    async postInvitationsCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.postInvitationsCreateRaw(initOverrides);
        return await response.value();
    }

}
